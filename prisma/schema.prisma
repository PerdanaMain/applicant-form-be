generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int     @id @default(autoincrement())
  roleId       Int
  email        String  @unique
  password     String
  refreshToken String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Role    Role     @relation(fields: [roleId], references: [roleId])
  Biodata Biodata?
}

model Role {
  roleId   Int    @id @default(autoincrement())
  roleName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Biodata {
  biodataId           Int     @id @default(autoincrement())
  userId              Int     @unique
  nama                String
  posisi              String
  noKtp               String
  tempatLahir         String
  tanggalLahir        String
  jenisKelamin        String
  agama               String
  golonganDarah       String
  statusPerkawinan    String
  alamatKtp           String
  alamatTinggal       String
  email               String
  noTelpon            String
  orangTerdekat       String
  skill               String
  bersediaDitempatkan Boolean
  expectedSalary      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Pendidikan Pendidikan[]
  Pelatihan  Pelatihan[]
  Pekerjaan  Pekerjaan[]
  User       User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Pendidikan {
  pendidikanId  Int    @id @default(autoincrement())
  biodataId     Int
  jenjang       String
  namaInstitusi String
  jurusan       String
  tahunLulus    String
  nilaiAkhir    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Biodata Biodata @relation(fields: [biodataId], references: [biodataId], onDelete: Cascade)
}

model Pelatihan {
  pelatihanId   Int     @id @default(autoincrement())
  biodataId     Int
  namaPelatihan String
  sertifikat    Boolean
  tahun         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Biodata Biodata @relation(fields: [biodataId], references: [biodataId], onDelete: Cascade)
}

model Pekerjaan {
  pekerjaanId    Int    @id @default(autoincrement())
  biodataId      Int
  namaPerusahaan String
  posisi         String
  pendapatan     Int
  tahun          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Biodata Biodata @relation(fields: [biodataId], references: [biodataId], onDelete: Cascade)
}
